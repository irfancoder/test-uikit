//
// Base styles
//

.input-group {
    @apply relative flex flex-wrap items-stretch w-full;

    > .form-control,
    > .custom-select,
    > .custom-file {
        @apply relative flex-auto;
        width: 1%;

        // Bring the "active" form control to the top of surrounding elements
        &:focus {
            @apply z-10;
        }

        + .form-control,
        + .custom-select,
        + .custom-file {
            @apply -ml-px;
        }
    }

    > .form-control,
    > .custom-select {
        &:not(:last-child) {
            @apply rounded-r-none;
        }
        &:not(:first-child) {
            @apply rounded-l-none;
        }
    }

    // Custom file inputs have more complex markup, thus requiring different
    // border-radius overrides.
    > .custom-file {
        @apply flex items-center;

        &:not(:last-child) .custom-file-label,
        &:not(:last-child) .custom-file-label::before {
            @apply rounded-r-none;
        }
        &:not(:first-child) .custom-file-label,
        &:not(:first-child) .custom-file-label::before {
            @apply rounded-l-none;
        }
    }
}

// Prepend and append
//
// While it requires one extra layer of HTML for each, dedicated prepend and
// append elements allow us to 1) be less clever, 2) simplify our selectors, and
// 3) support HTML5 form validation.

.input-group-prepend,
.input-group-append {
    @apply flex;

    // Ensure buttons are always above inputs for more visually pleasing borders.
    // This isn't needed for `.input-group-text` since it shares the same border-color
    // as our inputs.
    .btn {
        @apply relative z-2;
    }

    .btn + .btn,
    .btn + .input-group-text,
    .input-group-text + .input-group-text,
    .input-group-text + .btn {
        @apply -ml-px;
    }
}

.input-group-prepend {
    @apply -mr-px;
}
.input-group-append {
    @apply -ml-px;
}

// Textual addons
//
// Serves as a catch-all element for any text or radio/checkbox input you wish
// to prepend or append to an input.

.input-group-text {
    @apply flex items-center mb-0 text-base font-normal text-center whitespace-normal md:whitespace-nowrap rounded border bg-gradient-to-t from-gray-200 to-white px-4;

    // Nuke default margins from checkboxes and radios to vertically center within.
    input[type="radio"],
    input[type="checkbox"] {
        @apply mt-0;
    }
}

// Prepend and append rounded corners
//
// These rulesets must come after the sizing ones to properly override sm and lg
// border-radius values when extending. They're more specific than we'd like
// with the `.input-group >` part, but without it, we cannot override the sizing.

.input-group > .input-group-prepend > .btn,
.input-group > .input-group-prepend > .input-group-text,
.input-group > .input-group-append:not(:last-child) > .btn,
.input-group > .input-group-append:not(:last-child) > .input-group-text,
.input-group
    > .input-group-append:last-child
    > .btn:not(:last-child):not(.dropdown-toggle),
.input-group
    > .input-group-append:last-child
    > .input-group-text:not(:last-child) {
    @apply rounded-r-none;
}

.input-group > .input-group-append > .btn,
.input-group > .input-group-append > .input-group-text,
.input-group > .input-group-prepend:not(:first-child) > .btn,
.input-group > .input-group-prepend:not(:first-child) > .input-group-text,
.input-group > .input-group-prepend:first-child > .btn:not(:first-child),
.input-group
    > .input-group-prepend:first-child
    > .input-group-text:not(:first-child) {
    @apply rounded-l-none;
}
